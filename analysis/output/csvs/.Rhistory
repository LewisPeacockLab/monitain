rm(list=ls())
rm(list=ls())
rm(list=ls())
source('~/Desktop/polyFit_z.R')
write.csv(bootBeta, file="byTrialBetaOut.csv")
getwd()
library(ggExtra)
library(grid)
library(gridExtra)
grid.arrange(bestFit1,bestFit2,bestFit3,bestFit4,bestFit5,BICmeans1,BICmeans2,BICmeans3,BICmeans4,BICmeans5,ncol=5)
grid.arrange(bestFit1,bestFit2,bestFit3,bestFit4,bestFit5, ncol=5)
install.packages("doBy",dependencies=TRUE)
install.packages("car",dependencies=TRUE)
install.packages("reshape2",dependencies=TRUE)
install.packages("ggplot2",dependencies=TRUE)
install.packages("lme",dependencies=TRUE)
install.packages("lmerTest",dependencies=TRUE)
install.packages("lattice",dependencies=TRUE)
library(doBy)
library(car)
library(reshape2)
library(effects)
library(ggplot2)
library(lme4)
library(ggExtra)
library(grid)
library(gridExtra)
library(lattice)
install.packages("doBy", dependencies = TRUE)
install.packages("car", dependencies = TRUE)
install.packages("reshape2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("lattice", dependencies = TRUE)
install.packages("reshape2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
grid.arrange(bestFit1,bestFit2,bestFit3,bestFit4,bestFit5,BICmeans1,BICmeans2,BICmeans3,BICmeans4,BICmeans5,ncol=5)
grid.arrange(bestFit1,bestFit2,bestFit3,bestFit4,bestFit5, ncol=5)
bestFit1
bestFit2
#Now assign the best fit polynomial by looking for the minimum fit
for(rowI in 1:nrow(boot2p)){boot2p$bestFit[rowI]=which.min(boot2p[rowI,c("type2_fit1","type2_fit2","type2_fit3","type2_fit4","type2_fit5")])}
#plot the histogram
bestFit2=ggplot(boot2p,aes(bestFit)) + geom_histogram(stat="count",fill=c("red","yellow","green","blue","purple")) + scale_x_continuous(name="Poly Fit", breaks=seq(1,5,1)) + scale_y_continuous(name="Count") + theme(axis.text.x = element_text(size=14), axis.title.x = element_text(face="bold",color="black",size=18)) +
theme(axis.text.y = element_text(size=14), axis.title.y = element_text(face="bold", color="black", size=18)) +
theme(panel.grid.minor=element_blank()) +
ggtitle("Trial Type 2: Histogram best fit") +
theme(plot.title = element_text(color="black",size=16,face="bold",hjust=.5))
### Trial type 2
boot2p=bootBeta[,c("iter","type2_fit1","type2_fit2","type2_fit3","type2_fit4","type2_fit5")]
boot2=melt(boot2p,id.vars="iter",variable.name="polyFit",value.name="BIC")
head(boot2,30)
tail(boot2)
#Now assign the best fit polynomial by looking for the minimum fit
for(rowI in 1:nrow(boot2p)){boot2p$bestFit[rowI]=which.min(boot2p[rowI,c("type2_fit1","type2_fit2","type2_fit3","type2_fit4","type2_fit5")])}
#plot the histogram
bestFit2=ggplot(boot2p,aes(bestFit)) + geom_histogram(stat="count",fill=c("red","yellow","green","blue","purple")) + scale_x_continuous(name="Poly Fit", breaks=seq(1,5,1)) + scale_y_continuous(name="Count") + theme(axis.text.x = element_text(size=14), axis.title.x = element_text(face="bold",color="black",size=18)) +
theme(axis.text.y = element_text(size=14), axis.title.y = element_text(face="bold", color="black", size=18)) +
theme(panel.grid.minor=element_blank()) +
ggtitle("Trial Type 2: Histogram best fit") +
theme(plot.title = element_text(color="black",size=16,face="bold",hjust=.5))
#Now I want to plot the average BIC values with error for each fit
meanBIC2=summaryBy(BIC~polyFit,data=boot2,FUN=c(mean,se))
names(meanBIC2)=c("PolyFit","BIC","se")
BICmeans2=ggplot(meanBIC2,aes(x=PolyFit,y=BIC,fill=PolyFit)) + geom_bar(stat="identity") + scale_y_continuous(name="Average BIC Value") + geom_errorbar(aes(ymin=BIC-se,ymax=BIC+se),width=.3)
BICmeans2=BICmeans2+coord_cartesian(ylim=c(750,800)) + scale_fill_discrete(labels=c("x","x^2","x^3","x^4","x^5")) + theme_bw() + theme(legend.position="bottom") + theme(axis.text.x = element_text(size=14), axis.title.x = element_text(face="bold",color="black",size=18)) +
theme(axis.text.y = element_text(size=14), axis.title.y = element_text(face="bold", color="black", size=18)) +
theme(panel.grid.minor=element_blank()) +
ggtitle("Trial Type 2: BIC") +
theme(plot.title = element_text(color="black",size=16,face="bold",hjust=.5)) + scale_x_discrete(name="BIC per iteration",labels=c("1","2","3","4","5"))
grid.arrange(bestFit2,BICmeans2,ncol=1)
write.csv(bootBeta, file="byTrialBetaOut.csv")write.csv(bootBeta, file="byTrialBetaOut.csv")
source('~/Desktop/polyFit_z.R')
source('~/Desktop/polyFit_z.R')
source('~/Desktop/polyFit_z.R')
install.packages("doBy", dependencies = TRUE)
source('~/Desktop/polyFit_z.R')
source('~/Desktop/polyFit_z.R')
getwd()
install.packages("lme4")
library(lme4)
load_fname <- '~/Dropbox (LewPeaLab)/BEHAVIOR/RepO/data_output/load_type.csv'
mcb_fname <- '~/Dropbox (LewPeaLab)/BEHAVIOR/RepO/data_output/mcb_acc.csv'
vis_fname <- '~/Dropbox (LewPeaLab)/BEHAVIOR/RepO/data_output/vis_acc.csv'
sem_fname <- '~/Dropbox (LewPeaLab)/BEHAVIOR/RepO/data_output/sem_acc.csv'
pho_fname <- '~/Dropbox (LewPeaLab)/BEHAVIOR/RepO/data_output/pho_acc.csv'
load_df <- read.csv(load_fname)
mcb_df <- read.csv(mcb_fname)
vis_df <- read.csv(vis_fname)
sem_df <- read.csv(sem_fname)
pho_df <- read.csv(pho_fname)
mcb_df
lme(mcb ~ clpsd_cond, random=~1|subj, data=mcb_df)
library(nlme)
library(multcomp)
library(nlme)
library(multcomp)
model_lme <- lme(mcb ~ clpsd_cond, random=~1|subj, data=mcb_df)
model_lme
anova(model_lme)
nlme()
nlme(model_lme, data=mcb_Df)
nlme(model_lme, data=mcb_df)
class(model_lme)
nlme(clpsd_cond ~ model_lme, data=mcb_df)
nlme(clpsd_cond ~ model_lme, data=mcb_df, fixed = mcb ~ clpsd_cond)
clpsd_cond ~ model_lme
model_lme
clpsd_cond
clps_cond
mcb _ clpsd_cond
mcb ~ clpsd_cond
library(lme4)
summary(mcb_df)
summary(model_lme)
anova(model_lme)
mcb_df
summary(model_lme)
anova(model_lme)
aov(model_lme)
aov(model_lme, data = mcb_df)
mcb_df <- aov(model_lme, data=mcb_df)
mcb_df
summary(mcb_df)
library(nlme)
library(multcomp)
#################
##  load data  ##
#################
all_fname <- '~/monitain/analysis/csvs/all_bySubj.csv'
pmCost_fname <- '~/monitain/analysis/csvs/pm_cost_bySubj.csv'
baseline_fname <- '~/monitain/analysis/csvs/baseline.csv'
maintain_fname <- '~/monitain/analysis/csvs/maintain.csv'
monitor_fname <- '~/monitain/analysis/csvs/monitor.csv'
mnm_fname <- '~/monitain/analysis/csvs/mnm.csv'
baseline_PM_fname <- '~/monitain/analysis/csvs/baseline_PM.csv'
maintain_PM_fname <- '~/monitain/analysis/csvs/maintain_PM.csv'
monitor_PM_fname <- '~/monitain/analysis/csvs/monitor_PM.csv'
mnm_PM_fname <- '~/monitain/analysis/csvs/mnm_PM.csv'
all_df <- read.csv(all_fname)
pmCost_df <- read.csv(pmCost_fname)
baseline_df <- read.csv(baseline_fname)
maintain_df <- read.csv(maintain_fname)
monitor_df <- read.csv(monitor_fname)
mnm_df <- read.csv(mnm_fname)
baseline_PM_df <- read.csv(baseline_PM_fname)
maintain_PM_df <- read.csv(maintain_PM_fname)
monitor_PM_df <- read.csv(monitor_PM_fname)
mnm_PM_df <- read.csv(mnm_PM_fname)
##########################################
##  rmANOVA for block type across subjs  ##
##########################################
# load_aov <- aov(acc ~ load_type + Error(subj), data=load_df)
# summary(load_aov)
all_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = all_df)
anova(all_lme)
summary(glht(all_lme,
linfct=mcp(load_type="Tukey")),
test=adjusted(type="bonferroni"))
library(nlme)
library(multcomp)
all_fname <- '~/monitain/analysis/csvs/all_bySubj.csv'
pmCost_fname <- '~/monitain/analysis/csvs/pm_cost_bySubj.csv'
baseline_fname <- '~/monitain/analysis/csvs/baseline.csv'
maintain_fname <- '~/monitain/analysis/csvs/maintain.csv'
monitor_fname <- '~/monitain/analysis/csvs/monitor.csv'
mnm_fname <- '~/monitain/analysis/csvs/mnm.csv'
baseline_PM_fname <- '~/monitain/analysis/csvs/baseline_PM.csv'
maintain_PM_fname <- '~/monitain/analysis/csvs/maintain_PM.csv'
monitor_PM_fname <- '~/monitain/analysis/csvs/monitor_PM.csv'
mnm_PM_fname <- '~/monitain/analysis/csvs/mnm_PM.csv'
all_df <- read.csv(all_fname)
pmCost_df <- read.csv(pmCost_fname)
all_fname <- '~/monitain/analysis/output/csvs/all_bySubj.csv'
pmCost_fname <- '~/monitain/analysis/output/csvs/pm_cost_bySubj.csv'
baseline_fname <- '~/monitain/analysis/output/csvs/baseline.csv'
maintain_fname <- '~/monitain/analysis/output/csvs/maintain.csv'
monitor_fname <- '~/monitain/analysis/output/csvs/monitor.csv'
mnm_fname <- '~/monitain/analysis/output/csvs/mnm.csv'
baseline_PM_fname <- '~/monitain/analysis/output/csvs/baseline_PM.csv'
maintain_PM_fname <- '~/monitain/analysis/output/csvs/maintain_PM.csv'
monitor_PM_fname <- '~/monitain/analysis/output/csvs/monitor_PM.csv'
mnm_PM_fname <- '~/monitain/analysis/output/csvs/mnm_PM.csv'
all_df <- read.csv(all_fname)
pmCost_df <- read.csv(pmCost_fname)
baseline_df <- read.csv(baseline_fname)
maintain_df <- read.csv(maintain_fname)
monitor_df <- read.csv(monitor_fname)
mnm_df <- read.csv(mnm_fname)
baseline_PM_df <- read.csv(baseline_PM_fname)
maintain_PM_df <- read.csv(maintain_PM_fname)
monitor_PM_df <- read.csv(monitor_PM_fname)
mnm_PM_df <- read.csv(mnm_PM_fname)
all_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = all_df)
anova(all_lme)
summary(glht(all_lme,
linfct=mcp(load_type="Tukey")),
test=adjusted(type="bonferroni"))
all_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = all_df)
all_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = all_df)
library(nlme)
library(multcomp)
all_fname <- '~/monitain/analysis/output/csvs/all_bySubj.csv'
pmCost_fname <- '~/monitain/analysis/output/csvs/pm_cost_bySubj.csv'
baseline_fname <- '~/monitain/analysis/output/csvs/baseline.csv'
maintain_fname <- '~/monitain/analysis/output/csvs/maintain.csv'
monitor_fname <- '~/monitain/analysis/output/csvs/monitor.csv'
mnm_fname <- '~/monitain/analysis/output/csvs/mnm.csv'
baseline_PM_fname <- '~/monitain/analysis/output/csvs/baseline_PM.csv'
maintain_PM_fname <- '~/monitain/analysis/output/csvs/maintain_PM.csv'
monitor_PM_fname <- '~/monitain/analysis/output/csvs/monitor_PM.csv'
mnm_PM_fname <- '~/monitain/analysis/output/csvs/mnm_PM.csv'
all_df <- read.csv(all_fname)
pmCost_df <- read.csv(pmCost_fname)
baseline_df <- read.csv(baseline_fname)
maintain_df <- read.csv(maintain_fname)
monitor_df <- read.csv(monitor_fname)
mnm_df <- read.csv(mnm_fname)
baseline_PM_df <- read.csv(baseline_PM_fname)
maintain_PM_df <- read.csv(maintain_PM_fname)
monitor_PM_df <- read.csv(monitor_PM_fname)
mnm_PM_df <- read.csv(mnm_PM_fname)
all_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = all_df)
all_df
View(all_df)
View(all_df)
all_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = all_df)
all_df.pm_acc
all_df[pm_acc]
na.pass(all_df)
View(all_df)
View(all_df)
all_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = all_df)
na.exclude(all_df)
all_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = all_df)
all_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = na.exclude(all_df))
anova(all_lme)
summary(glht(all_lme,
linfct=mcp(load_type="Tukey")),
test=adjusted(type="bonferroni"))
summary(glht(all_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
pm_acc_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = na.exclude(all_df)) #drop out rows with missing values
anova(pm_acc_lme)
summary(glht(pm_acc_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
og_acc_lme <- lme(pm_acc ~ og_acc, random=~1|subj, data = na.exclude(all_df)) #drop out rows with missing values
anova(og_acc_lme)
summary(glht(og_acc_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
og_acc_lme <- lme(pm_acc ~ og_acc, random=~1|subj, data = na.exclude(all_df)) #drop out rows with missing values
anova(og_acc_lme)
summary(glht(og_acc_lme,
linfct=mcp(og_acc="Tukey")),
test=adjusted(type="bonferroni"))
og_acc_lme <- lme(og_acc ~ blockType, random=~1|subj, data = na.exclude(all_df)) #drop out rows with missing values
anova(og_acc_lme)
summary(glht(og_acc_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
rt_lme <- lme(meanTrial_rt ~ blockType, random=~1|subj, data = na.exclude(all_df)) #drop out rows with missing values
anova(rt_lme)
summary(glht(rt_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
pmCost_lme <- lme(pmCost ~ blockType, random=~1|subj, data = pmCost_df) #drop out rows with missing values
anova(pmCost_lme)
summary(glht(pmCost_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
pmCost_lme <- lme(pmCost ~ blockType, random=~1|subj, data = pmCost_df) #drop out rows with missing values
pmCost_lme <- lme(pm_cost ~ blockType, random=~1|subj, data = pmCost_df) #drop out rows with missing values
pmCost_lme <- lme(pm_cost ~ blockType, random=~1|subj, data = na.exclude(pmCost_df)) #drop out rows with missing values
anova(pmCost_lme)
summary(glht(pmCost_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
library(nlme)
library(multcomp)
all_fname <- '~/monitain/analysis/output/csvs/all_bySubj.csv'
pmCost_fname <- '~/monitain/analysis/output/csvs/pm_cost_bySubj.csv'
baseline_fname <- '~/monitain/analysis/output/csvs/baseline.csv'
maintain_fname <- '~/monitain/analysis/output/csvs/maintain.csv'
monitor_fname <- '~/monitain/analysis/output/csvs/monitor.csv'
mnm_fname <- '~/monitain/analysis/output/csvs/mnm.csv'
baseline_PM_fname <- '~/monitain/analysis/output/csvs/baseline_PM.csv'
maintain_PM_fname <- '~/monitain/analysis/output/csvs/maintain_PM.csv'
monitor_PM_fname <- '~/monitain/analysis/output/csvs/monitor_PM.csv'
mnm_PM_fname <- '~/monitain/analysis/output/csvs/mnm_PM.csv'
all_df <- read.csv(all_fname)
pmCost_df <- read.csv(pmCost_fname)
baseline_df <- read.csv(baseline_fname)
maintain_df <- read.csv(maintain_fname)
monitor_df <- read.csv(monitor_fname)
mnm_df <- read.csv(mnm_fname)
baseline_PM_df <- read.csv(baseline_PM_fname)
maintain_PM_df <- read.csv(maintain_PM_fname)
monitor_PM_df <- read.csv(monitor_PM_fname)
mnm_PM_df <- read.csv(mnm_PM_fname)
na.exclude(all_df)
pm_acc_lme <- lme(pm_acc ~ blockType, random=~1|subj, data = na.exclude(all_df)) #drop out rows with missing values
anova(pm_acc_lme)
summary(glht(pm_acc_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
og_acc_lme <- lme(og_acc ~ blockType, random=~1|subj, data = na.exclude(all_df)) #drop out rows with missing values
anova(og_acc_lme)
summary(glht(og_acc_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
rt_lme <- lme(meanTrial_rt ~ blockType, random=~1|subj, data = na.exclude(all_df)) #drop out rows with missing values
anova(rt_lme)
summary(glht(rt_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
pmCost_lme <- lme(pm_cost ~ blockType, random=~1|subj, data = na.exclude(pmCost_df)) #drop out rows with missing values
anova(pmCost_lme)
summary(glht(pmCost_lme,
linfct=mcp(blockType="Tukey")),
test=adjusted(type="bonferroni"))
library(lme4)
library(nlme)
library(ggplot2)
# Set directory
setwd('/Users/krh2382/monitain/analysis/output/csvs')
CSV_PATH = getwd()
# Load data
data_bytrial=read.csv("ALL_BYTRIAL.csv")
data_cost_acc = read.csv("cost_acc.csv")
# Find total number of subjects (takes excluded subjs into account)
n_subjs = length(levels(data_bytrial$subj))
for (it in 1:n_iterations) {
# Create list of subjects for each iteration
sampled_subjs = sample(subj_list, size = length(subj_list), replace=T)
for (data_i in 1:length(sampled_subjs)) {
if (data_i == 1) {
bootstrap = data_cost_acc[data_cost_acc$subj == sampled_subjs[data_i],]
} else {
bootstrap = rbind(bootstrap, data_cost_acc[data_cost_acc$subj == sampled_subjs[data_i],])
}
}
# Maintenance cost vs MnM accuracy
lm1_cost_mnmAcc_interact <- lm(mnm_acc ~ main_cost + mon_cost + main_cost:mon_cost, data = bootstrap)
lm2_cost_mnmAcc <- lm(mnm_acc ~ main_cost + mon_cost, data = bootstrap)
lm3_mainCost_mnmAcc <- lm(mnm_acc ~ main_cost, data = bootstrap)
lm3_monCost_mnmAcc <- lm(mnm_acc ~ mon_cost, data = bootstrap)
lm4_monCost_mnmAcc <- lm(mnm_acc ~ 1, data = bootstrap)
aic_cost_mnm1 = AIC(lm1_cost_mnmAcc_interact)
aic_cost_mnm2 = AIC(lm2_cost_mnmAcc)
aic_main_mnm3 = AIC(lm3_mainCost_mnmAcc)
aic_mon_mnm3 = AIC(lm3_monCost_mnmAcc)
aic_mon_mnm4 = AIC(lm4_monCost_mnmAcc)
aic_cost_mnm.data[it, ]<- c(aic_cost_mnm1, aic_cost_mnm2, aic_main_mnm3, aic_mon_mnm3, aic_mon_mnm4)
# Monitor cost vs MnM accuracy
#lm1_monCost_mnmAcc <- lm(mnm_acc ~ mon_cost + main_cost + mon_cost:main_cost, data = bootstrap)
#lm2_monCost_mnmAcc <- lm(mnm_acc ~ mon_cost + main_cost, data = bootstrap)
#aic_mon_mnm1 = AIC(lm1_monCost_mnmAcc)
#aic_mon_mnm2 = AIC(lm2_monCost_mnmAcc)
#aic_mon_mnm.data[it, ] <- c(aic_mon_mnm1, aic_mon_mnm2, aic_mon_mnm3, aic_mon_mnm4)
}
## Bootstrap
n_iterations = 1000
subj_list = levels(data_cost_acc$subj)
aic_cost_mnm.data <- data.frame(
cost_mnm_interact = rep(0,n_iterations),
cost_mnm_noInteract = rep(0,n_iterations),
main_mnm = rep(0,n_iterations),
mon_mnm = rep(0, n_iterations),
one_mnm = rep(0, n_iterations)
)
for (it in 1:n_iterations) {
# Create list of subjects for each iteration
sampled_subjs = sample(subj_list, size = length(subj_list), replace=T)
for (data_i in 1:length(sampled_subjs)) {
if (data_i == 1) {
bootstrap = data_cost_acc[data_cost_acc$subj == sampled_subjs[data_i],]
} else {
bootstrap = rbind(bootstrap, data_cost_acc[data_cost_acc$subj == sampled_subjs[data_i],])
}
}
# Maintenance cost vs MnM accuracy
lm1_cost_mnmAcc_interact <- lm(mnm_acc ~ main_cost + mon_cost + main_cost:mon_cost, data = bootstrap)
lm2_cost_mnmAcc <- lm(mnm_acc ~ main_cost + mon_cost, data = bootstrap)
lm3_mainCost_mnmAcc <- lm(mnm_acc ~ main_cost, data = bootstrap)
lm3_monCost_mnmAcc <- lm(mnm_acc ~ mon_cost, data = bootstrap)
lm4_monCost_mnmAcc <- lm(mnm_acc ~ 1, data = bootstrap)
aic_cost_mnm1 = AIC(lm1_cost_mnmAcc_interact)
aic_cost_mnm2 = AIC(lm2_cost_mnmAcc)
aic_main_mnm3 = AIC(lm3_mainCost_mnmAcc)
aic_mon_mnm3 = AIC(lm3_monCost_mnmAcc)
aic_mon_mnm4 = AIC(lm4_monCost_mnmAcc)
aic_cost_mnm.data[it, ]<- c(aic_cost_mnm1, aic_cost_mnm2, aic_main_mnm3, aic_mon_mnm3, aic_mon_mnm4)
# Monitor cost vs MnM accuracy
#lm1_monCost_mnmAcc <- lm(mnm_acc ~ mon_cost + main_cost + mon_cost:main_cost, data = bootstrap)
#lm2_monCost_mnmAcc <- lm(mnm_acc ~ mon_cost + main_cost, data = bootstrap)
#aic_mon_mnm1 = AIC(lm1_monCost_mnmAcc)
#aic_mon_mnm2 = AIC(lm2_monCost_mnmAcc)
#aic_mon_mnm.data[it, ] <- c(aic_mon_mnm1, aic_mon_mnm2, aic_mon_mnm3, aic_mon_mnm4)
}
bootstrap
lm3_mainCost_mnmAcc <- lm(mnm_acc ~ main_cost, data = bootstrap)
lm3_mainCost_mnmAcc
summary(lm3_mainCost_mnmAcc)
glmer1_cost_mnmAcc_interact <- glmer(mnm_acc ~ main_cost + mon_cost + (1|subj) + main_cost:mon_cost, data = bootstrap, family = binomial(link="logit"))
mnm_acc
bootstrap.mnm_acc
bootstrap
for (it in 1:n_iterations) {
# Create list of subjects for each iteration
sampled_subjs = sample(subj_list, size = length(subj_list), replace=T)
for (data_i in 1:length(sampled_subjs)) {
if (data_i == 1) {
bootstrap = data_bytrial[data_bytrial$subj == sampled_subjs[data_i],]
} else {
bootstrap = rbind(bootstrap, data_bytrial[data_bytrial$subj == sampled_subjs[data_i],])
}
}
}
bootstrap
data_bytrial
